//
// Autogenerated by Thrift Compiler (0.5.0-en-exported)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

Utility_sendMarketingEmail_args = function(args) {
  this.authenticationToken = null;
  this.parameters = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.parameters !== undefined) {
      this.parameters = args.parameters;
    }
  }
};
Utility_sendMarketingEmail_args.prototype = {};
Utility_sendMarketingEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parameters = new MarketingEmailParameters();
        this.parameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_sendMarketingEmail_args.prototype.write = function(output) {
  output.writeStructBegin('Utility_sendMarketingEmail_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.STRUCT, 2);
    this.parameters.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_sendMarketingEmail_result = function(args) {
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
Utility_sendMarketingEmail_result.prototype = {};
Utility_sendMarketingEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_sendMarketingEmail_result.prototype.write = function(output) {
  output.writeStructBegin('Utility_sendMarketingEmail_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_fileSupportTicket_args = function(args) {
  this.authenticationToken = null;
  this.ticket = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.ticket !== undefined) {
      this.ticket = args.ticket;
    }
  }
};
Utility_fileSupportTicket_args.prototype = {};
Utility_fileSupportTicket_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ticket = new SupportTicket();
        this.ticket.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_fileSupportTicket_args.prototype.write = function(output) {
  output.writeStructBegin('Utility_fileSupportTicket_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRUCT, 2);
    this.ticket.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_fileSupportTicket_result = function(args) {
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
Utility_fileSupportTicket_result.prototype = {};
Utility_fileSupportTicket_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_fileSupportTicket_result.prototype.write = function(output) {
  output.writeStructBegin('Utility_fileSupportTicket_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_sendAppFeedback_args = function(args) {
  this.authenticationToken = null;
  this.appFeedback = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
    if (args.appFeedback !== undefined) {
      this.appFeedback = args.appFeedback;
    }
  }
};
Utility_sendAppFeedback_args.prototype = {};
Utility_sendAppFeedback_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.appFeedback = new AppFeedback();
        this.appFeedback.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_sendAppFeedback_args.prototype.write = function(output) {
  output.writeStructBegin('Utility_sendAppFeedback_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  if (this.appFeedback !== null && this.appFeedback !== undefined) {
    output.writeFieldBegin('appFeedback', Thrift.Type.STRUCT, 2);
    this.appFeedback.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_sendAppFeedback_result = function(args) {
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
Utility_sendAppFeedback_result.prototype = {};
Utility_sendAppFeedback_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_sendAppFeedback_result.prototype.write = function(output) {
  output.writeStructBegin('Utility_sendAppFeedback_result');
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_getCrossPromotionInfo_args = function(args) {
  this.authenticationToken = null;
  if (args) {
    if (args.authenticationToken !== undefined) {
      this.authenticationToken = args.authenticationToken;
    }
  }
};
Utility_getCrossPromotionInfo_args.prototype = {};
Utility_getCrossPromotionInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.authenticationToken = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_getCrossPromotionInfo_args.prototype.write = function(output) {
  output.writeStructBegin('Utility_getCrossPromotionInfo_args');
  if (this.authenticationToken !== null && this.authenticationToken !== undefined) {
    output.writeFieldBegin('authenticationToken', Thrift.Type.STRING, 1);
    output.writeString(this.authenticationToken);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Utility_getCrossPromotionInfo_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof EDAMUserException) {
    this.userException = args;
    return;
  }
  if (args instanceof EDAMSystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.userException !== undefined) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined) {
      this.systemException = args.systemException;
    }
  }
};
Utility_getCrossPromotionInfo_result.prototype = {};
Utility_getCrossPromotionInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CrossPromotionInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new EDAMUserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new EDAMSystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Utility_getCrossPromotionInfo_result.prototype.write = function(output) {
  output.writeStructBegin('Utility_getCrossPromotionInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UtilityClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UtilityClient.prototype = {};
UtilityClient.prototype.sendMarketingEmail = function(authenticationToken, parameters, callback) {
  if (callback === undefined) {
    this.send_sendMarketingEmail(authenticationToken, parameters);
    this.recv_sendMarketingEmail();
  } else {
    var postData = this.send_sendMarketingEmail(authenticationToken, parameters, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_sendMarketingEmail);
  }
};

UtilityClient.prototype.send_sendMarketingEmail = function(authenticationToken, parameters, callback) {
  this.output.writeMessageBegin('sendMarketingEmail', Thrift.MessageType.CALL, this.seqid);
  var args = new Utility_sendMarketingEmail_args();
  args.authenticationToken = authenticationToken;
  args.parameters = parameters;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UtilityClient.prototype.recv_sendMarketingEmail = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Utility_sendMarketingEmail_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
UtilityClient.prototype.fileSupportTicket = function(authenticationToken, ticket, callback) {
  if (callback === undefined) {
    this.send_fileSupportTicket(authenticationToken, ticket);
    this.recv_fileSupportTicket();
  } else {
    var postData = this.send_fileSupportTicket(authenticationToken, ticket, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_fileSupportTicket);
  }
};

UtilityClient.prototype.send_fileSupportTicket = function(authenticationToken, ticket, callback) {
  this.output.writeMessageBegin('fileSupportTicket', Thrift.MessageType.CALL, this.seqid);
  var args = new Utility_fileSupportTicket_args();
  args.authenticationToken = authenticationToken;
  args.ticket = ticket;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UtilityClient.prototype.recv_fileSupportTicket = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Utility_fileSupportTicket_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
UtilityClient.prototype.sendAppFeedback = function(authenticationToken, appFeedback, callback) {
  if (callback === undefined) {
    this.send_sendAppFeedback(authenticationToken, appFeedback);
    this.recv_sendAppFeedback();
  } else {
    var postData = this.send_sendAppFeedback(authenticationToken, appFeedback, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_sendAppFeedback);
  }
};

UtilityClient.prototype.send_sendAppFeedback = function(authenticationToken, appFeedback, callback) {
  this.output.writeMessageBegin('sendAppFeedback', Thrift.MessageType.CALL, this.seqid);
  var args = new Utility_sendAppFeedback_args();
  args.authenticationToken = authenticationToken;
  args.appFeedback = appFeedback;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UtilityClient.prototype.recv_sendAppFeedback = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Utility_sendAppFeedback_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  return;
};
UtilityClient.prototype.getCrossPromotionInfo = function(authenticationToken, callback) {
  if (callback === undefined) {
    this.send_getCrossPromotionInfo(authenticationToken);
    return this.recv_getCrossPromotionInfo();
  } else {
    var postData = this.send_getCrossPromotionInfo(authenticationToken, true);
    return this.output.getTransport()
      .send(this, postData, arguments, this.recv_getCrossPromotionInfo);
  }
};

UtilityClient.prototype.send_getCrossPromotionInfo = function(authenticationToken, callback) {
  this.output.writeMessageBegin('getCrossPromotionInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new Utility_getCrossPromotionInfo_args();
  args.authenticationToken = authenticationToken;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

UtilityClient.prototype.recv_getCrossPromotionInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Utility_getCrossPromotionInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.userException) {
    throw result.userException;
  }
  if (null !== result.systemException) {
    throw result.systemException;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getCrossPromotionInfo failed: unknown result';
};
